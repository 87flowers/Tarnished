#pragma once
#include <bit>
#include <vector>
#include <sstream>
#include <cassert>
#include <cstring>
#include <cmath>
#include <list>

#define MAX_PLY 125
#define BENCH_DEPTH 12

// Random big num
#ifdef _MSC_VER
    #include <__msvc_int128.hpp>
using u128 = std::_Unsigned128;
#else
using u128 = unsigned __int128;
#endif

//#define TUNE
//#define STORE_LMR_DATA

// Struct for tunable parameters
struct TunableParam
{
    std::string name;
    int value;
    int defaultValue;
    int min;
    int max;
    int step;
};

std::list<TunableParam>& tunables();
TunableParam& addTunableParam(std::string name, int value, int min, int max, int step);
void printWeatherFactoryConfig();

#define TUNABLE_PARAM(name, val, min, max, step) \
    inline TunableParam& name##Param = addTunableParam(#name, val, min, max, step); \
    inline int name() { return name##Param.value; }


// History Constants
constexpr int16_t MAX_HISTORY = 16383;
const int16_t DEFAULT_HISTORY = 0;
constexpr int CORR_HIST_ENTRIES = 16384;
constexpr int MAX_CORR_HIST = 1024;
// NNUE Parameters
constexpr int16_t HL_N = 512;
constexpr int16_t QA = 255;
constexpr int16_t QB = 64;
constexpr int16_t NNUE_SCALE = 400;
constexpr int OUTPUT_BUCKETS = 8; 

// Lmr Net
constexpr std::array<std::array<double, 3>, 16> lmrL1 = {{     
                                                    {{0.23031233251094818, -0.35398030281066895, 0.290000855922699}}, 
{{-0.2502358853816986, -0.38423219323158264, -0.296264111995697}}, 
{{0.08559172600507736, -0.22202681005001068, -0.09727319329977036}}, 
{{-0.09029899537563324, 0.46361443400382996, -0.07775866240262985}}, 
{{0.39379966259002686, 0.4754335880279541, -0.13767363131046295}}, 
{{-0.12438076734542847, -0.3620513677597046, -0.4714498221874237}}, 
{{0.5339260101318359, 0.56095290184021, 0.20744925737380981}}, 
{{0.1867281049489975, 0.2321879118680954, -0.13090220093727112}}, 
{{0.5800144076347351, 0.13913865387439728, -0.1086852103471756}}, 
{{0.3750433325767517, -0.4431793689727783, 0.6063848733901978}}, 
{{-0.3912203311920166, -0.403667688369751, 0.3605723977088928}}, 
{{-0.5206932425498962, -0.3818736672401428, 0.13128942251205444}}, 
{{0.4721912443637848, -0.012494601309299469, 0.17712454497814178}}, 
{{0.3746441602706909, -0.03160174936056137, 0.4129883050918579}}, 
{{0.15105308592319489, -0.15867184102535248, -0.08138041943311691}}, 
{{0.01921778917312622, -0.27889180183410645, 0.02768939733505249}}
                                                }};

constexpr std::array<double, 16> lmrL1Bias = {0.4506244361400604, 0.25264793634414673, -0.5053188800811768, 0.6360633969306946, 0.7528637051582336, -0.4456649422645569, 0.0035290089435875416, 0.7057108283042908, 0.02777695469558239, -0.15847128629684448, -0.1073053777217865, 0.26298463344573975, -0.33580562472343445, 0.8014612793922424, 0.15115903317928314, 0.533562183380127};
constexpr std::array<double, 16> lmrL2 = {-0.05156389996409416, -0.04664623737335205, -0.18246546387672424, 0.01917845755815506, 0.17244765162467957, 0.020883619785308838, -0.22060894966125488, 0.2486027181148529, -0.1113506630063057, 0.10064199566841125, -0.17916202545166016, 0.1298454999923706, -0.12172668427228928, 0.3425958752632141, -0.18029402196407318, -0.04637560248374939};
constexpr double lmrOutputBias = 0.22619034349918365;
// History Parameters
TUNABLE_PARAM(PAWN_CORR_WEIGHT, 186, 64, 2048, 32)
TUNABLE_PARAM(MAJOR_CORR_WEIGHT, 128, 64, 2048, 32)
TUNABLE_PARAM(MINOR_CORR_WEIGHT, 128, 64, 2048, 32)
TUNABLE_PARAM(NON_PAWN_STM_CORR_WEIGHT, 128, 64, 2048, 32)
TUNABLE_PARAM(NON_PAWN_NSTM_CORR_WEIGHT, 128, 64, 2048, 32)
TUNABLE_PARAM(CORRHIST_BONUS_WEIGHT, 100, 10, 300, 10);

TUNABLE_PARAM(HIST_BONUS_QUADRATIC, 7, 1, 10, 1)
TUNABLE_PARAM(HIST_BONUS_LINEAR, 274, 64, 384, 32);
TUNABLE_PARAM(HIST_BONUS_OFFSET, 182, 64, 768, 64);

TUNABLE_PARAM(HIST_MALUS_QUADRATIC, 5, 1, 10, 1)
TUNABLE_PARAM(HIST_MALUS_LINEAR, 283, 64, 384, 32);
TUNABLE_PARAM(HIST_MALUS_OFFSET, 169, 64, 768, 64);

// Search Parameters
TUNABLE_PARAM(RFP_MARGIN, 76, 30, 100, 8);
TUNABLE_PARAM(RFP_MAX_DEPTH, 6, 4, 10, 1);

TUNABLE_PARAM(NMP_BASE_REDUCTION, 4, 2, 5, 1);
TUNABLE_PARAM(NMP_REDUCTION_SCALE, 4, 3, 6, 1);
TUNABLE_PARAM(NMP_EVAL_SCALE, 210, 50, 300, 10);

TUNABLE_PARAM(SE_MIN_DEPTH, 7, 4, 10, 1);
TUNABLE_PARAM(SE_BETA_SCALE, 31, 8, 64, 1);
TUNABLE_PARAM(SE_DOUBLE_MARGIN, 22, 0, 40, 2);

TUNABLE_PARAM(LMR_BASE_QUIET, 139, -50, 200, 5);
TUNABLE_PARAM(LMR_DIVISOR_QUIET, 278, 150, 350, 5);
TUNABLE_PARAM(LMR_BASE_NOISY, 20, -50, 200, 5);
TUNABLE_PARAM(LMR_DIVISOR_NOISY, 331, 150, 350, 5);
TUNABLE_PARAM(LMR_MIN_DEPTH, 1, 1, 8, 1);
TUNABLE_PARAM(LMR_MIN_MOVECOUNT, 4, 1, 10, 1);
TUNABLE_PARAM(LMR_HIST_DIVISOR, 8192, 4096, 16385, 650);

TUNABLE_PARAM(IIR_MIN_DEPTH, 5, 2, 9, 1);

TUNABLE_PARAM(LMP_MIN_MOVES_BASE, 2, 2, 8, 1);
TUNABLE_PARAM(LMP_DEPTH_SCALE, 1, 1, 10, 1);

TUNABLE_PARAM(SEE_PRUNING_SCALAR, -90, -128, -16, 16)

TUNABLE_PARAM(MIN_ASP_WINDOW_DEPTH, 4, 3, 8, 1);
TUNABLE_PARAM(INITIAL_ASP_WINDOW, 37, 8, 64, 4);
TUNABLE_PARAM(ASP_WIDENING_FACTOR, 3, 1, 32, 2);